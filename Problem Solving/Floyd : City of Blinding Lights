#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);


vector<vector<int>> findDist(int V, vector<int>& u, vector<int>& v, vector<int>& w){
    // They key here in this problem is to create the distance matrix only once
    // in the main() calling function which takes O(V^3) time but only once.
    // Then afterwards, query the distance between 2 cities in O(1) constant time
    
    vector<vector<int>> dist(V);    
    for(int i = 0; i<V; ++i){
        // Create a 2-D array dist[], dist[i][j] INT_MAX represants no path between
        // 2 cities i and j
        dist[i] = vector<int>(V, INT_MAX);
    }
    
    for(int i = 0; i<u.size(); ++i){
        // Initialize matrix values from given single-single vectors
        dist[u[i]-1][v[i]-1] = w[i];
    }
    
    for(int i = 0; i<V; ++i){
        // Problem states path from node to itself is not present
        dist[i][i] = 0;
    }
    
    for(int k = 0; k<V; ++k){
        for(int r = 0; r<V; ++r){
            for(int c = 0; c<V; ++c){
                
                if(r == k || c == k)
                    // SInce 'k' is the mediator, we don't include k
                    continue;
                
                if( dist[r][k]!=INT_MAX && dist[k][c]!=INT_MAX &&
                    dist[r][c] > (dist[r][k] + dist[k][c]) )
                    // Update the distance value if needed
                    dist[r][c] = dist[r][k] + dist[k][c];
            }
        }
    }
    // Return the matrix
    return dist;
}

int main()
{
    string road_nodes_edges_temp;
    getline(cin, road_nodes_edges_temp);

    vector<string> road_nodes_edges = split(rtrim(road_nodes_edges_temp));

    int road_nodes = stoi(road_nodes_edges[0]);
    int road_edges = stoi(road_nodes_edges[1]);

    vector<int> road_from(road_edges);
    vector<int> road_to(road_edges);
    vector<int> road_weight(road_edges);

    for (int i = 0; i < road_edges; i++) {
        string road_from_to_weight_temp;
        getline(cin, road_from_to_weight_temp);

        vector<string> road_from_to_weight = split(rtrim(road_from_to_weight_temp));

        int road_from_temp = stoi(road_from_to_weight[0]);
        int road_to_temp = stoi(road_from_to_weight[1]);
        int road_weight_temp = stoi(road_from_to_weight[2]);

        road_from[i] = road_from_temp;
        road_to[i] = road_to_temp;
        road_weight[i] = road_weight_temp;
    }

    string q_temp;
    getline(cin, q_temp);
    
    vector<vector<int>> dist = findDist(road_nodes, road_from, road_to, road_weight);

    int q = stoi(ltrim(rtrim(q_temp)));

    for (int q_itr = 0; q_itr < q; q_itr++) {
        string first_multiple_input_temp;
        getline(cin, first_multiple_input_temp);

        vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

        int x = stoi(first_multiple_input[0]);

        int y = stoi(first_multiple_input[1]);
        
        // These queries take O(1) time
        if(dist[x-1][y-1] == INT_MAX)
        cout << "-1\n";
        else
        cout << dist[x-1][y-1] << "\n";
    }

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
