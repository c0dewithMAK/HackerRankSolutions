#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);
typedef pair<int, int> p;
/*
 * Complete the 'prims' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. 2D_INTEGER_ARRAY edges
 *  3. INTEGER start
 */

int prims(int n, vector<vector<int>> edges, int start) {
    
    vector<vector<int>> adj[n];
    for(int i = 0; i<edges.size(); ++i){
        //if(edges[i][2] == 0)
        //    continue;
        int u = edges[i][0];
        int v = edges[i][1];
        int w = edges[i][2];
        vector<int> t1, t2;
        
        t1.push_back(v);
        t1.push_back(w);
        adj[u-1].push_back(t1);
        
        t2.push_back(u);
        t2.push_back(w);
        adj[v-1].push_back(t2);
    }
    
    // Create a Min Heap of size V where V is the number of vertices in the given graph.     // Every node of min heap contains {key-value, vertex number} pair elements.
    priority_queue<p, vector<p>, greater<p>> pq;
    pq.push({0, start});
    for(int i = 0; i<n; ++i){
        if(i == start-1)
            continue;
        pq.push({INT_MAX, i+1});
    }
    
    // Create a set that shows the number of vertices included in MST till now
    // Here ordering is not maintained as we need a structure where we can store
    // elements for the purpose of finding them quickly
    set<int> mstSet;
    
    // This below is our MST path array which will store proper MST tree path
    // Here ordering is maintined and this becomes our output
    vector<int> mstPath;
    
    vector<int> key(n, INT_MAX);    
    key[start-1] = 0;    
    
    // A visited array which stores the elements marked and visited with lowest
    // key values up until now
    vector<int> visited(n, false);
    
    // Variable to store the sum of edge weights in MST
    int sumMST = 0;
    
    while(!pq.empty()){
        p temp = pq.top();
        pq.pop();
        
        int u = temp.second;
        
        if(visited[u-1])
            continue;
        visited[u-1] = true;
        mstSet.insert(u);
        mstPath.push_back(u);
        
        int keyVal = temp.first;
        sumMST += keyVal;        
        
        for( vector<int> v : adj[u-1]){
            if( mstSet.find(v[0]) == mstSet.end() && key[v[0]-1] > v[1]){
                key[v[0]-1] = v[1];
                if(!visited[v[0]-1])
                    pq.push({key[v[0]-1], v[0]});
            }
        }
    }
    // For fun's sake lets print the MST as well :D
    for(int i : mstPath ){
        cout << i << " ";
    }
    
    return sumMST;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);

    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

    int n = stoi(first_multiple_input[0]);

    int m = stoi(first_multiple_input[1]);

    vector<vector<int>> edges(m);

    for (int i = 0; i < m; i++) {
        edges[i].resize(3);

        string edges_row_temp_temp;
        getline(cin, edges_row_temp_temp);

        vector<string> edges_row_temp = split(rtrim(edges_row_temp_temp));

        for (int j = 0; j < 3; j++) {
            int edges_row_item = stoi(edges_row_temp[j]);

            edges[i][j] = edges_row_item;
        }
    }

    string start_temp;
    getline(cin, start_temp);

    int start = stoi(ltrim(rtrim(start_temp)));

    int result = prims(n, edges, start);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
