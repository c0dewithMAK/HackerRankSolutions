#include <bits/stdc++.h>
using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);
typedef pair<int, int> p;
/*
 * Complete the 'shortestReach' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. 2D_INTEGER_ARRAY edges
 *  3. INTEGER s
 */

vector<int> shortestReach(int n, vector<vector<int>> edges, int s) {

    // Let's create the adjacency list from the given edges first
    vector<vector<p>> adj(n);
    
    for(int i = 0; i<edges.size(); ++i){
        int u = edges[i][0];
        int v = edges[i][1];
        int cost = edges[i][2];       
        
        adj[u-1].push_back(make_pair(cost, v));          
        adj[v-1].push_back(make_pair(cost, u));
        
    }
    
    // Let's maintain a priority queue which keeps track of vertex having minimum
    // distance
    priority_queue<p, vector<p>, greater<p>> pq;
    vector<bool> visited(n, false); 
    vector<int> dist(n, INT_MAX);
    dist[s-1] = 0;       
    pq.push({0, s});
        
    while(!pq.empty()){
        // Pick the vertex which is unvisited till now and has lowest dist[i] value 
        p u = pq.top();
        pq.pop();
        // If it's visited already move on
        if(visited[u.second-1])
            continue;
        // Else mark it as visited
        visited[u.second-1] = true;
        for(p v : adj[u.second-1]){
            
            // Apply the main greedy condition of Dijkstra's Algo
            if( (dist[u.second-1] + v.first) < dist[v.second-1] ) {
                    dist[v.second-1] = dist[u.second-1] + v.first;
                    
                    // If the vertex is unvisited, update it's d[i] value
                    // and again push it to the priority queue for further
                    // processing. DO NOT MARK IT AS VISITED!!
                    if(!visited[v.second-1])
                        pq.push({dist[v.second-1], v.second});
                }
        }       
    }
    for(int i = 0; i<n; ++i){
        if (i == s-1)
            continue;
        if(dist[i] == INT_MAX)
            dist[i] = -1;
    }
    dist.erase(dist.begin() + (s-1));
    return dist;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string t_temp;
    getline(cin, t_temp);

    int t = stoi(ltrim(rtrim(t_temp)));

    for (int t_itr = 0; t_itr < t; t_itr++) {
        string first_multiple_input_temp;
        getline(cin, first_multiple_input_temp);

        vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));

        int n = stoi(first_multiple_input[0]);

        int m = stoi(first_multiple_input[1]);

        vector<vector<int>> edges(m);

        for (int i = 0; i < m; i++) {
            edges[i].resize(3);

            string edges_row_temp_temp;
            getline(cin, edges_row_temp_temp);

            vector<string> edges_row_temp = split(rtrim(edges_row_temp_temp));

            for (int j = 0; j < 3; j++) {
                int edges_row_item = stoi(edges_row_temp[j]);

                edges[i][j] = edges_row_item;
            }
        }

        string s_temp;
        getline(cin, s_temp);

        int s = stoi(ltrim(rtrim(s_temp)));

        vector<int> result = shortestReach(n, edges, s);

        for (size_t i = 0; i < result.size(); i++) {
            fout << result[i];

            if (i != result.size() - 1) {
                fout << " ";
            }
        }

        fout << "\n";
    }

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
